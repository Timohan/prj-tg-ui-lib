/*!
 * \file
 * \brief file tg_font_text.cpp
 *
 * font text holds the general information about text
 * that is generated by TgFontTextGenerator
 *
 * Copyright of Timo Hannukkala. All rights reserved.
 *
 * \author Timo Hannukkala <timohannukkala@hotmail.com>
 */

#include "tg_font_text.h"
#include <algorithm>
#include "cache/tg_font_characters_cache.h"
#include "../global/tg_global_application.h"
#include "../global/tg_global_log.h"


TgFontText::TgFontText() :
    m_textWidth(0),
    m_visibleTopY(0),
    m_visibleBottomY(0)
{

}
/*!
 * \brief TgFontText::setFontFileNames
 *
 * sets and re-generates the font list, sets main font file
 * as first font file on the list
 *
 * \param mainFontFile [in]
 * \param listFontFiles [in] sets mainFontFile as first to this list
 */
void TgFontText::setFontFileNames(const std::string &mainFontFile, const std::vector<std::string> &listFontFileNames)
{
    getFontFileNames(mainFontFile, listFontFileNames, m_listFontFileNames);
}

/*!
 * \brief TgFontText::getFontFileNames
 *
 * sets and re-generates the font list, sets main font file
 * as first font file on the list
 *
 * \param mainFontFile [in]
 * \param listFontFiles [in] sets mainFontFile as first to this list
 * \param listFontFileNamesOut [out] sets mainFontFile as first to this list
 */
void TgFontText::getFontFileNames(const std::string &mainFontFile, const std::vector<std::string> &listFontFileNames,
                                  std::vector<std::string> &listFontFileNamesOut)
{
    std::vector<std::string>::iterator it;
    listFontFileNamesOut = std::move(listFontFileNames);
    if (mainFontFile.empty()
        || (!listFontFileNamesOut.empty() && listFontFileNamesOut.at(0) == mainFontFile)) {
        for (it=listFontFileNamesOut.begin();it!=listFontFileNamesOut.end();it++) {
            TgGlobalApplication::getInstance()->getFontCharactersCache()->addFont(*it);
        }
        return;
    }


    for (it=listFontFileNamesOut.begin();it!=listFontFileNamesOut.end();it++) {
        if ((*it) == mainFontFile) {
            listFontFileNamesOut.erase(it);
        }
        TgGlobalApplication::getInstance()->getFontCharactersCache()->addFont(*it);
    }

    listFontFileNamesOut.insert(listFontFileNamesOut.begin(), mainFontFile);
}

/*!
 * \brief TgFontText::addCharacter
 *
 * add character to list
 * setFontFileNames must be called first before this function
 *
 * \param character [in] character to add into m_listCharacter
 * \param r text red color
 * \param g text green color
 * \param b text blue color
 */
void TgFontText::addCharacter(uint32_t character, uint8_t r, uint8_t g, uint8_t b)
{
    TgFontTextCharacterInfo charInfo;
    std::string fontFileName;

    if (!m_listCharacter.empty()
        && m_listCharacter.back().m_fontFileNameIndex != -1) {
        fontFileName = m_listFontFileNames.at( m_listCharacter.back().m_fontFileNameIndex );
    }

    charInfo.m_fontFileNameIndex = TgGlobalApplication::getInstance()->getFontCharactersCache()->getFontIndexForCharacter(character, fontFileName, m_listFontFileNames);
    charInfo.m_character = character;
    charInfo.m_textColorR = r;
    charInfo.m_textColorG = g;
    charInfo.m_textColorB = b;

    m_listCharacter.push_back(charInfo);
}

/*!
 * \brief TgFontText::getCharacterCount
 *
 * \return get count of characters in this text
 */
size_t TgFontText::getCharacterCount()
{
    return m_listCharacter.size();
}

/*!
 * \brief TgFontText::getCharacter
 *
 * \param i index of character info from this text
 * \return character info
 */
TgFontTextCharacterInfo *TgFontText::getCharacter(size_t i)
{
    return &m_listCharacter[i];
}

/*!
 * \brief TgFontText::getCharactersByFontFileNameIndex
 *
 * generates list of characters that come from same fontFileNameIndex (same font file)
 * on the text
 *
 * \param fontFileNameIndex
 * \return list of characters that are belonging to this fontFileNameIndex
 * each character is only there for once
 */
std::vector<uint32_t> TgFontText::getCharactersByFontFileNameIndex(int32_t fontFileNameIndex)
{
    std::vector<uint32_t> ret;
    std::vector<TgFontTextCharacterInfo>::const_iterator it;
    for (it=m_listCharacter.begin();it!=m_listCharacter.end();it++) {
        if (it->m_fontFileNameIndex == fontFileNameIndex) {
            if (std::find(ret.begin(), ret.end(), it->m_character) == ret.end()) {
                ret.push_back(it->m_character);
            }
        }
    }
    return ret;
}

/*!
 * \brief TgFontText::generateFontTextInfoGlyphs
 *
 * generates m_listFontInfo for this text
 * which font textures contains these glyphs in the text
 *
 * \param fontSize
 */
void TgFontText::generateFontTextInfoGlyphs(float fontSize)
{
    TgFontInfo *fontInfo;
    size_t i, indexToUse;
    std::vector<bool>m_characterUsed;
    m_characterUsed.resize(getCharacterCount(), false);
    m_listFontInfo.clear();
    m_listFontInfo.resize(getCharacterCount(), nullptr);

    while (1) {
        indexToUse = m_characterUsed.size();
        for (i=0;i<m_characterUsed.size();i++) {
            if (!m_characterUsed[i]) {
                indexToUse = i;
                break;
            }
        }
        if (indexToUse == m_characterUsed.size()) {
            break;
        }

        fontInfo = nullptr;
        if (getCharacter(indexToUse)->m_fontFileNameIndex != -1) {
            std::vector<uint32_t> listCharacters = getCharactersByFontFileNameIndex(m_listCharacter[indexToUse].m_fontFileNameIndex);

            fontInfo = TgGlobalApplication::getInstance()->getFontGlyphCache()->generateCacheForText(listCharacters,
                                        m_listFontFileNames.at( getCharacter(indexToUse)->m_fontFileNameIndex ).c_str(), fontSize);
        }

        for (i=0;i<m_characterUsed.size();i++) {
            if (getCharacter(i)->m_fontFileNameIndex == getCharacter(indexToUse)->m_fontFileNameIndex) {
                m_characterUsed[i] = true;
                m_listFontInfo[i] = fontInfo;
            }
        }
    }
}

/*!
 * \brief TgFontText::getFontInfo
 *
 * get font info of index
 *
 * \param i index of font info
 * \return
 */
TgFontInfo *TgFontText::getFontInfo(size_t i)
{
    return m_listFontInfo[i];
}

/*!
 * \brief TgFontText::getTextWidth
 *
 * \param get text width
 */
float TgFontText::getTextWidth()
{
    return m_textWidth;
}

/*!
 * \brief TgFontText::getVisibleTopY
 *
 * \param get visible top y
 */
float TgFontText::getVisibleTopY()
{
    return m_visibleTopY;
}

/*!
 * \brief TgFontText::getVisibleBottomY
 *
 * \param get visible bottom y
 */
float TgFontText::getVisibleBottomY()
{
    return m_visibleBottomY;
}

/*!
 * \brief TgFontText::getFontHeight
 *
 * \param get font height
 */
float TgFontText::getFontHeight()
{
    float ret = 0;
    size_t i, c = m_listFontInfo.size();
    for (i=0;i<c;i++) {
        if (m_listFontInfo[i]) {
            if (ret < m_listFontInfo[i]->m_fontHeight) {
                ret = m_listFontInfo[i]->m_fontHeight;
            }
        }
    }

    return ret;
}

void TgFontText::setTextWidth(float textWidth)
{
    m_textWidth = textWidth;
}

void TgFontText::setVisibleTopY(float visibleTopY)
{
    m_visibleTopY = visibleTopY;
}

void TgFontText::setVisibleBottomY(float visibleBottomY)
{
    m_visibleBottomY = visibleBottomY;
}
